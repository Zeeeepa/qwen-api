name: Refresh Access Token and Update README

on:
  schedule:
    - cron: "0 0 */5 * *" # every 5 days at 00:00 UTC
  workflow_dispatch: # manual trigger if you want

jobs:
  refresh-token:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract token from README
        id: get_token
        run: |
          # Extract the token from the code block after "- Token:"
          token=$(awk '/^- Token:/{found=1; next} found && /^```$/ && getline > 0 {print; found=0}' README.md | tr -d '\n')
          echo "Extracted token length: ${#token}"
          if [ -z "$token" ]; then
            echo "Error: Could not extract token from README.md"
            exit 1
          fi
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Refresh access token
        id: refresh
        run: |
          echo "🔄 Refreshing access token..."
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "https://qwen.tanu.me/v1/refresh?token=${{ steps.get_token.outputs.token }}")

          # Extract HTTP status code and response body
          http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
          response_body=$(echo "$response" | sed '/HTTP_CODE:/d')

          echo "HTTP Status: $http_code"
          echo "Response Body: $response_body"

          if [ "$http_code" != "200" ]; then
            echo "❌ Token refresh failed with status $http_code"
            echo "Response: $response_body"
            exit 1
          fi

          # Check if response is valid JSON and extract fields
          if ! echo "$response_body" | jq . > /dev/null 2>&1; then
            echo "❌ Invalid JSON response: $response_body"
            exit 1
          fi

          expires=$(echo "$response_body" | jq -r '.expires_at')
          access_token=$(echo "$response_body" | jq -r '.access_token')

          if [ "$expires" = "null" ] || [ -z "$expires" ]; then
            echo "❌ No expires_at field found in response"
            echo "Response: $response_body"
            exit 1
          fi

          if [ "$access_token" = "null" ] || [ -z "$access_token" ]; then
            echo "❌ No access_token field found in response"
            echo "Response: $response_body"
            exit 1
          fi

          echo "✅ Token refreshed successfully"
          echo "🕒 New expires at: $expires"
          echo "🔑 New access token length: ${#access_token}"
          echo "expires=$expires" >> $GITHUB_OUTPUT
          echo "access_token=$access_token" >> $GITHUB_OUTPUT

      - name: Update README with new token and expiry
        run: |
          expires="${{ steps.refresh.outputs.expires }}"
          access_token="${{ steps.refresh.outputs.access_token }}"
          echo "🔄 Updating token and expires in README..."
          echo "🕒 New expires: $expires"
          echo "🔑 New token length: ${#access_token}"

          # Update the expires line
          sed -i "s/^- Expires:.*/- Expires: $expires/" README.md

          # Update the access token in the code block
          awk -v new_token="$access_token" '
          /^- Token:$/ { print; in_token_section=1; next }
          in_token_section && /^```$/ && !in_code_block { print; in_code_block=1; next }
          in_token_section && in_code_block && /^```$/ { print new_token; print; in_token_section=0; in_code_block=0; next }
          in_token_section && in_code_block { next }
          { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md

          echo "✅ Successfully updated token and expires date in README.md"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet README.md; then
            echo "No changes detected in README.md"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in README.md"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📋 Changes made:"
            git diff README.md
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "🔄 Refresh token and update expires to ${{ steps.refresh.outputs.expires }}"
          git push
          echo "✅ Changes committed and pushed successfully"

      - name: No changes needed
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "ℹ️ No changes were necessary - token and expires date are already up to date"
